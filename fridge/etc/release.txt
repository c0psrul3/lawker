????
stop gaps:
	- editorial: awkwords?
	- stuff from sed & awk
	- towers of hanoi??
	- more functional stuff
	- saya
	- batchrunner

4444444444444444444
- awk100: awf nroff in awk
- next section on awk word-processors (markdown, awkwords, nroff in awk)
- Even more fun with cal and GeekTool 
    http://www.macosxhints.com/article.php?story=20040625094428394
-fun mind reading machine in awk
- moving files

- sed variants
	- sed2awk
	- robbins: http://www.gnu.org/software/gawk/manual/gawk.html 13.3.8
- new release of runawk

5555555555555555555
- awk100:   ronold lou's soccer game
- fun: eliza.awk

- new section on postscript manipulation tools
	- robbin's postscript tools

 - bash formatter
      http://mail.google.com/mail/#label/awk.info/1201bb25d80abedd
-tips: getting shell variables into awk. 
	- config file	
	- double quotes
	- the '$' trick

66666666666666666
- awk100: the amazing awk assembler
- new section on awk interpreters (awk assembler, awklisp)
- quick sort in awk
- fun sig generator

visual awk

77777777777777777777
- akw100 oo in ansi "C" awk packages. axel schreiner
- new section on operating ssytems and awk (awk linux) and 
	http://www.icir.org/tfrc/sims1.html
	awk-linux

- awk for databases
  http://victor-notes.com/qppro/awk.html

awkastar

888888888888888888

code testing: kernighan
spread sheet access: http://www.freakout.de/mc.htm#Piping
eiso's awk scrits- if i understood what they did
- fun: my bayes trick
- cocomo lv

awktemplate
===================
because it jsut doesn't matter
i have an ide: emacs.unix

i have development environment:
- version control, backed up onto the web
- discussion tools (a google news group, a wikispaces wiki, chat, email)
- test driven development (eg subdirectory with x.want files)
- library of functions stored in a directory, indexed by ctags
- emacs/vim ctags intergration means by code is hyperlinked by function name

what makes me productive is not the language, its the environment
- unix
- tdd

addict to tweaking
- smalltalk environment

because here are the factors that control software economics
- boehm

bcasue its principles other the code that matter
- algorhtms O(logn)

because i am not just doing but also constantly explainin to people what i have to do
- awk exels at the one off report
- if i wrote in other languages, i'd still be writing the reports with awk scripts

because i teach 3rd year students programming languages and they eat
awk quickly, chew smalltalk slower, and barph at lisp. the added power
and functionality of these languages confuses them.

because i do a lot of stochastic stuff and so i've given away overly complex algorithms
in favor of simpler stochastic ones

because i do a lot of data mining and i keep finding that simple bayes
approaches consistently do better than anything else- and bayes is a snap in awk (see awk)

----------------
becasue it drives yu to the core.
no time lost nterfacing to complex libraries. no clear data structure design. just do it.


our software development processes are too complex since we don't acknowledge the following fact. usually,
we dont know what we are doing. software development isn't some mathematical process of translating
requirements into an executable, then testing that executable against the requiremetns. instead,
we never really know the requirements cause we've never really looked hard at that part of the world
before and, when we doing, looking at it matures our understanding of it so now we are looking at something
else. premise of agile software development is that up to 50% of the requirements can change each month- a pace
of change that is anethema to traditional plan-based approaches.

even when we do know what we are doing, we don't tell our software what that is. worked a lot in
testing and the one problem i kept returning too is "where is the oracle?". the program has produced
output, now is that the right output? what is our expectations regarding the output? how can we
judge if this output is better than that? more importantly, given that we generate gigabytes of output
now (cloud computing , fast CPUs), how can we automatically judge all that output? 
usually, these questions have no answers cause there is no "ocacle" built into the system.

our premise is that "knowing what (and why) we are doing it" should be a primary concern, all the
way through the lifecycle. also, we should tell the program what and why it is doing what it is doing
so it can automtically judge how well it is doing it. further, if we know the what and why of the program,
this simplifies software development:

- simpler design: wholes and holes. let the machine fill in the gaps
- simpler testing, certification , etc etc

to test that thesis, here we are going to it as simple as possible. 

this is not tdd (well, at least not traditional tdd). tdd  is usually about
unit tests. here we do system-level testing to learn inputs that
are better/worse than others and allow the program to adjust itself

this is not ai (well, at least no traditional ai). we don't assume some
logic program and delcaractive constraints.  the "keys effect"
sugggests we don't need the overhead of all that- rather we can
apply it to standard object-oriented / procedural systems.

this is not agent-based systems (well, at least not traditional agent-based
systems). yes, we will model user goals and goal interaction and
negotiaton between goals. and we will represent beliefs, desires,
and intentions. but we will add in a lot of data mining technology
to reduce 
