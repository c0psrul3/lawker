# error-repair classes
<trivial> "," ":" ";"		;
<lineterm> ";" "}"		;
<endmarker> "EOF"		;

# lookahead classes
<SCLASS> "extern" "typedef" "static" "auto" "register" ;
<SPEC> "void" "char" "short" "int" "long" "float" "double" "signed"
	"unsigned" "struct" "union" "enum" "typedefid" ;
<QUAL> "const" "volatile" ;
# WHOLESPEC is specifiers that stand alone; PARTSPEC is ones that can flock
<WHOLESPEC> "void" "float" "struct" "union" "enum" "typedefid" ;
<PARTSPEC> "char" "short" "int" "long" "double" "signed" "unsigned" ;
# BUILTINSPEC is SPEC less typedefid
<BUILTINSPEC> "void" "char" "short" "int" "long" "float" "double" "signed"
	"unsigned" "struct" "union" "enum" ;

# text to generate for complex tokens
"id" -> "___"
"typedefid" -> "___"
"fconst" -> "0.0"
"dconst" -> "0"
"oconst" -> "0"
"hconst" -> "0x0"
"cconst" -> "'x'"
"string" -> "\"___\""

# C spec works bottom-up, so start at the bottom of this file :-)
it: translation_unit ;

# 3.3.1
# this integrates constants (3.1.3) for lookahead reasons
# we also have not done string concatenation, to keep line lengths down,
# so we must accept a sequence of strings rather than just one
# NB, the final form is inlined in 3.3.3 and 3.3.4 due to lookahead problems
primary_expression: (
	"id"
	| "fconst"
	| "dconst"
	| "oconst"
	| "hconst"
	| "cconst"
	| ["string"] "string" {"string" ?}
	| "(" expression ")"
);

# 3.3.2
postfix_expression:
	primary_expression {
		"[" expression "]"
		| "(" (![")"] argument_expression_list ?) ")"
		| "." ( "id" | "typedefid" )
		| "->" ( "id" | "typedefid" )
		| "++"
		| "--"
		| [*] >>
	}
;
argument_expression_list:
	 assignment_expression {"," assignment_expression ?}
;

# 3.3.3
# This is straightforward except for the tricky lookahead problem in sizeof.
# We use recursion rather than iteration because (a) it's tricky to get the
# semantic cookies in the right places with prefix iteration, and (b) the
# lookahead problems get lots worse with iteration.
unary_expression: (
	"++" unary_expression
	| "--" unary_expression
	| "&" cast_expression
	| "*" cast_expression
	| "+" cast_expression
	| "-" cast_expression
	| "~" cast_expression
	| "!" cast_expression
	| "sizeof" (
		["("/"void"] sizetype
		| ["("/"char"] sizetype
		| ["("/"short"] sizetype
		| ["("/"int"] sizetype
		| ["("/"long"] sizetype
		| ["("/"float"] sizetype
		| ["("/"double"] sizetype
		| ["("/"signed"] sizetype
		| ["("/"unsigned"] sizetype
		| ["("/"struct"] sizetype
		| ["("/"union"] sizetype
		| ["("/"enum"] sizetype
		| ["("/"typedefid"] sizetype
		| ["("/"const"] sizetype
		| ["("/"volatile"] sizetype
		| [*] unary_expression
	)
	| [*] postfix_expression
);
sizetype: "(" type_name ")" ;

# 3.3.4
# Same comments as for 3.3.3; here the lookahead hassle is for casts.
cast_expression: (
	["("/"void"] casted
	| ["("/"char"] casted
	| ["("/"short"] casted
	| ["("/"int"] casted
	| ["("/"long"] casted
	| ["("/"float"] casted
	| ["("/"double"] casted
	| ["("/"signed"] casted
	| ["("/"unsigned"] casted
	| ["("/"struct"] casted
	| ["("/"union"] casted
	| ["("/"enum"] casted
	| ["("/"typedefid"] casted
	| ["("/"const"] casted
	| ["("/"volatile"] casted
	| [*] unary_expression
);
casted: "(" type_name ")" cast_expression ;

# 3.3.5
multiplicative_expression:
	cast_expression {
		"*" cast_expression
		| "/" cast_expression
		| "%" cast_expression
		| [*] >>
	}
;

# 3.3.6
additive_expression:
	multiplicative_expression {
		"+" multiplicative_expression
		| "-" multiplicative_expression
		| [*] >>
	}
;

# 3.3.7
shift_expression:
	additive_expression {
		"<<" additive_expression
		| ">>" additive_expression
		| [*] >>
	}
;

# 3.3.8
relational_expression:
	shift_expression {
		"<" shift_expression
		| ">" shift_expression
		| "<=" shift_expression
		| ">=" shift_expression
		| [*] >>
	}
;

# 3.3.9
equality_expression:
	relational_expression {
		"==" relational_expression
		| "!=" relational_expression
		| [*] >>
	}
;

# 3.3.10
AND_expression: equality_expression {"&" equality_expression ?} ;

# 3.3.11
exclusive_OR_expression: AND_expression {"^" AND_expression ?} ;

# 3.3.12
inclusive_OR_expression:
	exclusive_OR_expression {"|" exclusive_OR_expression ?}
;

# 3.3.13
logical_AND_expression:
	inclusive_OR_expression {"&&" inclusive_OR_expression ?}
;

# 3.3.14
logical_OR_expression:
	logical_AND_expression {"||" logical_AND_expression ?}
;

# 3.3.15
conditional_expression:
	logical_OR_expression
	("?" expression ":" conditional_expression ?)
;

# 3.3.16
# Enforcement of absence of binary ops and casts on LHS is left to later,
# it really can't be done in a top-down parse.  assignment_operator is
# inlined for semantics' sake.  The recursion here is necessary to get
# the associativity correct.
assignment_expression:
	conditional_expression (
		"=" assignment_expression
		| "*=" assignment_expression
		| "/=" assignment_expression
		| "%=" assignment_expression
		| "+=" assignment_expression
		| "-=" assignment_expression
		| "<<=" assignment_expression
		| ">>=" assignment_expression
		| "&=" assignment_expression
		| "^=" assignment_expression
		| "|=" assignment_expression
		| [*]
	)
;

# 3.3.17
expression: assignment_expression {"," assignment_expression ?} ;

# 3.4
constant_expression: conditional_expression ;

# 3.5
# declaration_specifiers is a little tricky because we really must enforce
# the 3.5.2 constraints on type specifiers here; otherwise if `t' is a
# typedefed name, we misparse "short t;" as two declaration_specifiers,
# where it is in fact one plus a declarator (barf!)
# as a further complication, we do not here enforce declaration_specifiers
# being non-null; it just gets too messy, so we punt that to the next pass
declaration:
	@%&!ds declaration_specifiers
	(![";"] init_declarator_list ?) ";" @%&!de
;
declaration_specifiers:
	 xclassquals (
		[WHOLESPEC] type_specifier xclassquals
		| [PARTSPEC] type_specifier {
			[PARTSPEC] type_specifier
			| [SCLASS, QUAL] xclassquals
			| [*] >>
		}
		| [*]
	)
;
xclassquals: {
	[SCLASS] storage_class_specifier
	| [QUAL] type_qualifier
	| [*] >>
} ;
init_declarator_list: init_declarator {"," init_declarator ?} ;
init_declarator: declarator ("=" initializer ?) ;

# 3.5.1
storage_class_specifier: (
	"typedef" @%&!dt
	| "extern"^
	| "static"
	| "auto"
	| "register"
);

# 3.5.2
# the constraints in this section are enforced in the 3.5 and 3.5.2.1 rules
type_specifier: (
	"void"
	| "char"
	| "short"
	| "int"
	| "long"
	| "float"
	| "double"
	| "signed"
	| "unsigned"
	| ["struct", "union"] struct_or_union_specifier
	| ["enum"] enum_specifier
	| "typedefid"		# The Syntax From The Black Lagoon
);

# 3.5.2.1
# specifier_qualifier_list is tricky, like declaration_specifiers in 3.5
struct_or_union_specifier:
	("struct" | "union") (
		["id", "typedefid"] ( "id" | "typedefid" ) (
			["{"] "{" @%&!ds struct_declaration_list
						 @%&!de "}"
			| [";"]
			| [*]
		)
		| "{" @%&!ds struct_declaration_list @%&!de "}"
	)
;
struct_declaration_list: struct_declaration {!["}"] struct_declaration ?} ;
struct_declaration: specifier_qualifier_list struct_declarator_list ";" ;
specifier_qualifier_list:
	 xquals (
		[WHOLESPEC] type_specifier xquals
		| [PARTSPEC] type_specifier {
			[PARTSPEC] type_specifier
			| [QUAL] xquals
			| [*] >>
		}
		| [*]
	)
;
xquals: {[QUAL] type_qualifier ?} ;
struct_declarator_list: struct_declarator {"," struct_declarator ?} ;
struct_declarator: (
	":" bitfield
	| [*] subdeclarator (":" bitfield ?)
								
);
bitfield: constant_expression ;

# 3.5.2.2
# Whether enums are complete immediately is not clear; wording implies that
# X3J11 thought they are, but if the size of the type depends on the constants
# they can't be.  We call them incomplete so such situations get diagnosed.
enum_specifier:
	"enum" (
		["id", "typedefid"] ( "id" | "typedefid" ) (
			["{"] "{" enumerator_list "}"
			| [*]
		)
		| "{" enumerator_list "}"
	)
;
enumerator_list: enumerator {"," enumerator ?} ;
enumerator: ( "id" | "typedefid" ) @%&!di (
		["="] "=" constant_expression
		| [*]
	) @%&!dd
;

# 3.5.3
type_qualifier: (
	"const"
	| "volatile"
);

# 3.5.4
# the mad confusion of C declarators bites hard in parameter lists
# we need the declarator/subdeclarator split for semantic processing
# note that struct_declarator calls subdeclarator directly
declarator: subdeclarator @%&!dd ;
subdeclarator: (["*"] pointers ?) direct_declarator ;
direct_declarator:
	(
		"id" @%&!di
		| "typedefid" @%&!di	# The Syntax From The Black Lagoon II
		| "(" subdeclarator ")"
	) {
		"[" (!["]"] constant_expression ?) "]"
		| "(" (
			")"
			| ["id"] identifier_list ")"	# but not typedefid
			| [*] parameter_type_list ")"
		)
		| [*] >>
	}
;
# pointers picks up multiple occurrences, unlike pointer in the standard
pointers: {"*" ([QUAL] type_qualifier_list ?) ?} ;
type_qualifier_list: {[QUAL] type_qualifier ?} ;
# parameter_list merged into parameter_type_list to avoid awkward lookahead
parameter_type_list:
	@%&!ss @%&!ds (
		["void"/")"] "void"
		| [*] parameter_declaration
			{"," ("..." >> ?) parameter_declaration ?}
	) @%&!de @%&!se
;
parameter_declaration: declaration_specifiers xparmdeclarator ;
xparmdeclarator:
	 (["id", "typedefid", "(", "[", "*"] parmsubdeclarator ?)
	@%&!dd
;
parmsubdeclarator: (
	["id", "typedefid", "(", "["] directparmdeclarator
	| ["*"] pointers (["id", "typedefid", "(", "["] directparmdeclarator ?)
);
directparmdeclarator:
	(
		"id" @%&!di
		| "typedefid" @%&!di
		| ["["]
		| "(" (
			# note, 3.5.4.3 says typedefid is parameter_type_list
			["id", "*", "(", "["] parmsubdeclarator
							 ")"
			| ")"
			| [*] parameter_type_list ")"
		)
	) {
		"(" (![")"] parameter_type_list ?) ")"
		| "[" (!["]"] constant_expression ?) "]"
		| [*] >>
	}
;
# note that typedefids cannot appear in identifier_list (3.7.1)
identifier_list:
	"id" {"," "id" ?}
;

# 3.5.5
# this stuff is a royal pain
type_name:
	 specifier_qualifier_list xabstractdeclarator
;
xabstractdeclarator:
	 (["*", "(", "["] abstractsubdeclarator ?)
;
abstractsubdeclarator: (
	["(", "["] direct_abstract_declarator
	| ["*"] pointers (["(", "["] direct_abstract_declarator ?)
);
direct_abstract_declarator:
	(
		["["]
		| "(" (
			["*", "(", "["] abstractsubdeclarator
							 ")"
			| ")"
			| [*] parameter_type_list ")"
		)
	) {
		"(" (![")"] parameter_type_list ?) ")"
		| "[" (!["]"] constant_expression ?) "]"
		| [*] >>
	}
;

# 3.5.6 (typedef_name) is done by devious means

# 3.5.7
# must integrate initializer_list into initializer to avoid lookahead mess
initializer: (
	"{" initializer {"," (["}"] >> ?) initializer ?} "}"
	| [*] assignment_expression
);

# 3.6
statement: (
	["id"/":"] labeled_statement
	| ["typedefid"/":"] labeled_statement
	| ["case", "default"] labeled_statement
	| ["{"] compound_statement
	| ["if", "switch"] selection_statement
	| ["while", "do", "for"] iteration_statement
	| ["goto", "continue", "break", "return"] jump_statement
	| [*] expression_statement
);

# 3.6.1
labeled_statement: (
	"id" ":" statement
	| "typedefid" ":" statement
	| "case" constant_expression ":" statement
	| "default" ":" statement
);

# 3.6.2
# The separation of scope from syntax is because function definitions want
# to do scope themselves, to put parameters in same scope as locals and to
# deal with label scope.  The two different forms of declaration_list are
# to deal with the problem of typedef names reused as labels.
compound_statement: @%&!ss compound @%&!se ;
compound: "{" xdeclaration_list (!["}"] statement_list ?) "}" ;
xdeclaration_list: {
	["typedefid"] (
		["typedefid"/":"] <<	# it's really a label!
		| [*] declaration
	)
	| [SCLASS, BUILTINSPEC, QUAL] declaration
	| [*] >>
};
# declaration_list is used only for old-style parameter declarations,
# which cannot precede a label.
declaration_list:
	declaration {[SCLASS, SPEC, QUAL] declaration ?}
;
statement_list: statement {!["}"] statement ?} ;

# 3.6.3
expression_statement: (![";"] expression ?) ";" ;

# 3.6.4
selection_statement: (
	"if" "(" expression ")" statement ("else" statement ?)
	| "switch" "(" expression ")" statement
);

# 3.6.5
iteration_statement: (
	"while" "(" expression ")" statement
	| "do" statement "while" "(" expression ")" ";"
	| "for" "(" (![";"] expression ?) ";" (![";"] expression ?) ";"
					(![")"] expression ?) ")" statement
);

# 3.6.6
jump_statement: (
	"goto" ( "id" | "typedefid" ) ";"
	| "continue" ";"
	| "break" ";"
	| "return" (
		[";"]
		| [*] expression
	) ";"
);

# 3.7, 3.7.1
# this is messy because it's hard to tell a function from a declaration early
translation_unit: {!["EOF"] external_declaration ?} "EOF" ;
external_declaration: (
	[SCLASS, SPEC, QUAL] @%&!ds declaration_specifiers
	(";" @%&!de << ?) declarator (
		[";", ","] edeclmore
		| "=" initializer edeclmore
		| [*] fndefn
	)
	| [*] @%&!ds declarator fndefn
);
edeclmore:
	{"," init_declarator ?} ";" @%&!de
;
fndefn:
	@%&!de @%&!ss (
		["{"]
		| [*] declaration_list
	) compound @%&!se
;
